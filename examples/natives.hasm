%bind alloc            0
%bind free             1
%bind print_f64        2
%bind print_i64        3 
%bind print_u64        4
%bind print_ptr        5
%bind dump_memory      6
%bind write            7

%bind print_memory     "*********************************"


;; Initial
;; ret
;; addr_a
;; addr_b
swap8:
	swap 2

	dup 1
	dup 1

	read8         ;; Read value at addr_b
	swap 1
	read8         ;; Read value at addr_a		

	dup 2
	swap 1
	
	write8        ;; Write 'a' to addr_b
	
	dup 2
	swap 1
	write8 	       ;; Write 'b' to addr_a	

	drop
	drop

	ret


;; Initial Stack
;; ret
;; n			;; (count)
;; print_memory		;; (base)
reverse:
	swap 2
	swap 1
	dup 0
	push 2
	divi

	;; Stack Till Here
	;; count / 2
	;; count
	;; base
	;; ret

	reverse_loop:
	    dup 0
	    push 0
	    eqi
	    jmp_if reverse_loop_end
    
	    ;; Body
	    dup 2
	    dup 2
	    push 1
	    minusi
	    dup 1
	    plusi
	    call swap8

	    ;; Stack Till Here
	    ;; count / 2
            ;; count
	    ;; base
	    ;; ret

	    ;; Decr the count / 2
	    push 1
	    minusi

	    ;; Decr the count
	    swap 1
	      push 2
	      minusi
	    swap 1

	    ;; Incr the base
	    swap 2
	      push 1
	      plusi
	    swap 2	    

            jmp reverse_loop
	reverse_loop_end:

	drop ;; Drop the count / 2
	drop ;; Drop the count :)
	drop ;; Drop the base :)
	
	ret

;; Initial Stack
;; ret
;; num
print_u64_:
     swap 1
     push print_memory

print_u64_loop:
     dup 1
     push 10
     modi
     push '0'
     plusi

     ;; Write to buffer memory
     dup 1
     swap 1
     write8

     ;; update the buffer memory
     push 1
     plusi

     ;; Get back to original state
     swap 1
     push 10
     divi
     swap 1

     ;; Check equal to zero
     dup 1
     push 0
     eqi
     not
     jmp_if print_u64_loop

print_u64_after_loop:

     ;; Stack Till here
     ;; print_memory + n
     ;; 0
     ;; ret

     ;; For number of digits  (count)
     ;; print_memory + n - print_memory = n
     push print_memory
     minusi

     ;; Stack Till here
     ;; n
     ;; 0
     ;; ret
     
     push print_memory
     swap 1

     ;; Stack Till here
     ;; n
     ;; print_memory
     ;; 0
     ;; ret
     
     dup 1
     dup 1
     call reverse

     native write

     drop

     push 0
     push 10
     write8

     push 0
     push 1
     native write

     ret
